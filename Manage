
import os
import string, random

from flask import Flask
from flask_sqlalchemy import SQLAlchemy

from SQLModleCore import Agent, Commands, db


app = Flask(__name__)

if "test.db" not in os.listdir("./register/"):
    db.create_all()


def name(db, length):
    """Génère un nom aléatoire unique en utilisant des lettres minuscules."""
    letters = string.ascii_lowercase
    while True:
        result_str = ''.join(random.choice(letters) for i in range(length))
        if not db.session.query(Agent).filter_by(noms=result_str).first():
            return result_str

def user(db, ordre=[], noms="Hello", os=None):
    """Crée un nouvel agent dans la table Agent de la base de données en utilisant les paramètres spécifiés."""
    noms = name(db, 10)
    agent = Agent(ordre=ordre, noms=noms, os=os)
    db.session.add(agent)
    db.session.commit()
    return agent.id

def user_vide(db, ordre=[], noms=None, os=None):
    """Crée un agent vide dans la table Agent de la base de données en utilisant les paramètres spécifiés."""
    agent = Agent(ordre=ordre, noms=noms, os=os)
    db.session.add(agent)
    db.session.commit()

def ordre(db, agent_id=1, orde=None, data="wait", status=False, resultat=None):
    """Crée une nouvelle commande dans la table Commands de la base de données en utilisant les paramètres spécifiés."""
    order = Commands(person_id=agent_id, data=data, status=status, orde=orde, resultat=resultat)
    db.session.add(order)
    db.session.commit()
    return order.id_commands, order.data, order.person_id



def user_list(db):
    """Affiche et retourne la liste de tous les agents dans la table Agent de la base de données, triés par id."""
    agents = db.session.query(Agent).order_by(Agent.id).all()
    for agent in agents:
        print(agent.noms, agent.id)
    return agents

def get_ordre(db, id_agent):
    """
    Retourne la première commande non effectuée dans la table Commands de la base de données pour l'agent spécifié.
    Si l'agent ou la commande n'est pas trouvé, une chaîne de caractères appropriée est renvoyée.
    """
    agent = db.session.query(Agent).filter_by(id=id_agent).first()
    if not agent:
        return 'No agent'
    command = db.session.query(Commands).filter_by(person_id=agent.id, status=False).first()
    if not command:
        return "No command"
    return command.id_commands, command.data, command.person_id

def all_ordre_user(db, id_agent, etat="todo"):
    f = db.session.query(Agent).filter_by(id=id_agent).first()
    o = f.ordre
    list_ordre_todo = dict()
    for i in range(len(o)):
        if etat == "todo" and o[i].status == False and o[i].data != None:
            list_ordre_todo[i] = {"Agent": o[i].person_id, "id_commands": o[i].id_commands, "commande a exe ": o[i].data, "commande status": o[i].status}
        elif etat == "all" and o[i].data != None:
            list_ordre_todo[i] = {"Agent": o[i].person_id, "id_commands": o[i].id_commands, "commande a exe ": o[i].data, "commande status": o[i].status}
        elif etat == "done" and o[i].status == True and o[i].data != None:
            list_ordre_todo[i] = {"Agent": o[i].person_id, "id_commands": o[i].id_commands, "commande a exe ": o[i].data, "commande status": o[i].status}
    return list_ordre_todo

def list_ordres(db):
    agents = db.session.query(Agent).order_by(Agent.id).all()
    result = {}
    for agent in agents:
        result[agent.noms] = agent.ordre
    return result

def delete_ordre(db, order_id):
    order = db.session.query(Commands).get(order_id)
    if order:
        db.session.delete(order)
        db.session.commit()
        return 'Removed'
    return 'Not found'

def delete_all_ordres(db, agent_id):
    orders = db.session.query(Commands).filter_by(person_id=agent_id).all()
    for o in orders:
        db.session.delete(o)
        db.session.commit()
    return 'Deleted'

def update_order_status(db, order_id, results=""):
    order = db.session.query(Commands).get(order_id)
    if order:
        order.status = True
        order.result = results
        db.session.commit()
        return 'Updated'
    return 'Error'

def main():
    createAgent(db)

if __name__ == '__main__':
    main()
